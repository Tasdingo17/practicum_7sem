#include <iostream>
#include <bitset>
#include <memory>
#include <array>
#include <algorithm>
#include "Task3.h"

int main(){
    // bitset stores in "reverse order"
    //std::bitset<WIDTH * HEIGHT> b
    GoLEngine game;
    //std::bitset<9> c(0b011101111);
    //std::cout << b[0] << " " << ~b[0] << std::endl;
    //for (int i = 0; i < b.size(); i++){
    //    std::cout << b[i]; 
    //}
    //std::cout << b.to_string() << std::endl;
    //Crosser<10> cr;
    //auto desc = cr.cross(b, c);
    //std::cout << b << " " << c << std::endl;
    //std::cout << desc.first << " " << desc.second << std::endl;
    //Mutator<10> mut(0.5);
    //std::cout << b << " " << mut.mutate(b) << std::endl;
    
    //GoLEngine::print_field(b);

    //std::cout << std::endl;

    //for(int i = 0; i < WIDTH; i++){
    //    for (int j=0; j < HEIGHT; j++){
    //        std::cout << count_neighbours(b, i, j) << " ";
    //    }
    //    std::cout << std::endl;
    //}

    //auto c = game.get_great_descedant(b, 100, true);
    //game.individ_to_file(c, "test.txt");

    //std::unique_ptr<SurvaivalFunc<WIDTH * HEIGHT>> func = std::make_unique<GoLSurvaivalFunc<WIDTH * HEIGHT>>(); 
    //std::cout << func->get_criterion_val(b) << std::endl;

    //const int N = 10;
    //std::unique_ptr<Selection<N>> selector = std::make_unique<RouletteSelection<N>>();
    //std::array<int, N> arr = {40, 10, 24, 45, 101, 4, 15 + PENALTY, 77, 34, 18};
    //auto idxs = selector->select(arr);
    //for (int i = 0; i < N; i++){
    //    std::cout << arr[idxs[i]] << " ";
    //}
    //std::cout << std::endl;

    //auto res = std::min_element(arr.begin(), arr.end());
    //int pos = res - arr.begin();
    //std::cout << "val: " << *res << " idx: " << pos << std::endl;

    
    Mutator<WIDTH * HEIGHT> mut(1. / (WIDTH * HEIGHT));
    RouletteSelection<POPULATION_SIZE> sel;
    GoLSurvaivalFunc<WIDTH*HEIGHT> surv_func;
    Crosser<WIDTH * HEIGHT> cros;
    GeneticAlgo<WIDTH * HEIGHT> gen_algo(sel, mut, cros, surv_func);

    gen_algo.run_algorithm();
    auto best_individ = gen_algo.get_best_individ();
    auto best_criterion = gen_algo.get_best_criterion();

    std::cout << "Best criterion: " << best_criterion << std::endl;
    //GoLEngine::individ_to_file(best_individ, "best.txt");
    game.get_great_descedant(best_individ, 100, true);

    return 0;
}